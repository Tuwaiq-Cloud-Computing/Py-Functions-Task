{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 .SFNS-Regular_wdth_opsz120000_GRAD_wght2580000;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue255;\red19\green118\blue70;\red15\green112\blue1;\red144\green1\blue18;\red24\green26\blue30;
}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c3529\c52549\c34510;\cssrgb\c0\c50196\c0;\cssrgb\c63922\c8235\c8235;\cssrgb\c12157\c13725\c15686;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww25160\viewh15600\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ########################## Q1 ###########################\
\
# Question 1: Write a function that takes two numbers and returns their sum.\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 def\cf0 \strokec4  num(a, b):\cb1 \
\cb3     \cf5 \strokec5 return\cf0 \strokec4  a + b\cb1 \
\
\cb3 result = num(\cf6 \strokec6 3\cf0 \strokec4 , \cf6 \strokec6 5\cf0 \strokec4 )\cb1 \
\cb3 print(result)  \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 ##### Output: \
8\cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 ########################## Q2 ###########################\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\
# Question 2: Print all the elements in the list using a for loop.\cf0 \cb1 \strokec4 \
\cb3 mylist = [\cf6 \strokec6 1\cf0 \strokec4 , \cf6 \strokec6 2\cf0 \strokec4 , \cf6 \strokec6 3\cf0 \strokec4 , \cf6 \strokec6 4\cf0 \strokec4 ]\cb1 \
\
\cf5 \cb3 \strokec5 for\cf0 \strokec4  item \cf5 \strokec5 in\cf0 \strokec4  mylist:\cb1 \
\cb3     print(item)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 ##### Output:\
\cf0 \cb1 \outl0\strokewidth0 \strokec4 1\
\pard\pardeftab720\partightenfactor0
\cf0 2\
3\
4\
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 ########################## Q3 ###########################\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \outl0\strokewidth0 \strokec4 \
\
\cf2 \cb3 \strokec2 # Question 3: Write a Python program to sum all the items in the list.\cf0 \cb1 \strokec4 \
\cb3 mylist = [\cf6 \strokec6 1\cf0 \strokec4 , \cf6 \strokec6 2\cf0 \strokec4 , \cf6 \strokec6 3\cf0 \strokec4 , \cf6 \strokec6 4\cf0 \strokec4 ]\cb1 \
\cb3 total = sum(mylist)\cb1 \
\cb3 print(total)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 ##### Output:\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 10\
\
\pard\pardeftab720\partightenfactor0
\cf0 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 ########################## Q4  ##########################\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 # Question 4: Write a Python program to get the largest number from the list.\cf0 \cb1 \strokec4 \
\cb3 mylist = [\cf6 \strokec6 1\cf0 \strokec4 , \cf6 \strokec6 2\cf0 \strokec4 , \cf6 \strokec6 3\cf0 \strokec4 , \cf6 \strokec6 4\cf0 \strokec4 ]\cb1 \
\cb3 largest = max(mylist)\cb1 \
\cb3 print(largest)\cb1 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf7 ##### Output:\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 4\cf7 \cb3 \
\
########################## Q5  ##########################\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 # Question 5: Write a function that takes a list and a number, then returns a new partial list starting from index 0 to index "number."\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 def\cf0 \strokec4  partial_list(my_list, number):\cb1 \
\cb3     \cf5 \strokec5 return\cf0 \strokec4  my_list[:number]\cb1 \
\
\cb3 result = partial_list([\cf6 \strokec6 1\cf0 \strokec4 , \cf6 \strokec6 2\cf0 \strokec4 , \cf6 \strokec6 3\cf0 \strokec4 , \cf6 \strokec6 4\cf0 \strokec4 , \cf6 \strokec6 5\cf0 \strokec4 ], \cf6 \strokec6 3\cf0 \strokec4 )\cb1 \
\cb3 print(result)  \cf2 \strokec2 # Output: [1, 2, 3]\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 ##### Output:\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 [1, 2, 3]\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 \
########################## Q6  ##########################\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 # Question 6: Loop through the letters in the string: "Tuwaiq_Academy." \cf0 \cb1 \strokec4 \
\cb3 my_string = \cf8 \cb3 \strokec8 "Tuwaiq_Academy"\cf0 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 for\cf0 \strokec4  letter \cf5 \strokec5 in\cf0 \strokec4  my_string:\cb1 \
\cb3     print(letter)\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 \
##### Output:\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 T\
u\
w\
a\
i\
q\
_\
A\
c\
a\
d\
e\
m\
y\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 \
########################## Q7  ##########################\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 # Question 7: Consider this list = ["Python", "C++", "Java"]. Exit the loop when x is equal to "C++."\cf0 \cb1 \strokec4 \
\cb3 my_list = [\cf8 \cb3 \strokec8 "Python"\cf0 \cb3 \strokec4 , \cf8 \cb3 \strokec8 "C++"\cf0 \cb3 \strokec4 , \cf8 \cb3 \strokec8 "Java"\cf0 \cb3 \strokec4 ]\cb1 \
\
\cf5 \cb3 \strokec5 for\cf0 \strokec4  language \cf5 \strokec5 in\cf0 \strokec4  my_list:\cb1 \
\cb3     \cf5 \strokec5 if\cf0 \strokec4  language == \cf8 \cb3 \strokec8 "C++"\cf0 \cb3 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 break\cf0 \cb1 \strokec4 \
\cb3     print(language)\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 \
##### Output:\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 Python\outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 \
########################## Q8  ##########################\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 # Question 8: Write a function that receives a list containing different numbers, rearranges the list so that the zeros are at the end of the list, and finally returns the arranged list.\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 def\cf0 \strokec4  rearrange_zeros(my_list):\cb1 \
\cb3     non_zeros = [x \cf5 \strokec5 for\cf0 \strokec4  x \cf5 \strokec5 in\cf0 \strokec4  my_list \cf5 \strokec5 if\cf0 \strokec4  x != \cf6 \strokec6 0\cf0 \strokec4 ]\cb1 \
\cb3     zeros = [x \cf5 \strokec5 for\cf0 \strokec4  x \cf5 \strokec5 in\cf0 \strokec4  my_list \cf5 \strokec5 if\cf0 \strokec4  x == \cf6 \strokec6 0\cf0 \strokec4 ]\cb1 \
\cb3     \cf5 \strokec5 return\cf0 \strokec4  non_zeros + zeros\cb1 \
\
\cb3 result = rearrange_zeros([\cf6 \strokec6 1\cf0 \strokec4 , \cf6 \strokec6 0\cf0 \strokec4 , \cf6 \strokec6 2\cf0 \strokec4 , \cf6 \strokec6 0\cf0 \strokec4 , \cf6 \strokec6 3\cf0 \strokec4 , \cf6 \strokec6 4\cf0 \strokec4 , \cf6 \strokec6 0\cf0 \strokec4 , \cf6 \strokec6 5\cf0 \strokec4 ])\cb1 \
\cb3 print(result)  \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 ##### Output:\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 [1, 2, 3, 4, 5, 0, 0, 0]\
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \
########################## 
\f1\b\fs36 \cf9 \cb3 \outl0\strokewidth0 \strokec9 Additional Challenge 
\f0\b0\fs24 \cf7 \cb3 \outl0\strokewidth0 ##########################\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 # Additional Challenge: Build a phone book program that receives the phone number, and returns the name of the owner. You can follow the table below\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 # Define the contactTable list of dictionaries\cf0 \cb1 \strokec4 \
\cb3 contactTable = [\cb1 \
\cb3     \{\cf8 \cb3 \strokec8 "name"\cf0 \cb3 \strokec4 : \cf8 \cb3 \strokec8 "Ahmed"\cf0 \cb3 \strokec4 , \cf8 \cb3 \strokec8 "Phone"\cf0 \cb3 \strokec4 : \cf8 \cb3 \strokec8 "0551112222"\cf0 \cb3 \strokec4 \},\cb1 \
\cb3     \{\cf8 \cb3 \strokec8 "name"\cf0 \cb3 \strokec4 : \cf8 \cb3 \strokec8 "Saad"\cf0 \cb3 \strokec4 , \cf8 \cb3 \strokec8 "Phone"\cf0 \cb3 \strokec4 : \cf8 \cb3 \strokec8 "0551113333"\cf0 \cb3 \strokec4 \},\cb1 \
\cb3     \{\cf8 \cb3 \strokec8 "name"\cf0 \cb3 \strokec4 : \cf8 \cb3 \strokec8 "Sultan"\cf0 \cb3 \strokec4 , \cf8 \cb3 \strokec8 "Phone"\cf0 \cb3 \strokec4 : \cf8 \cb3 \strokec8 "0551114444"\cf0 \cb3 \strokec4 \},\cb1 \
\cb3     \{\cf8 \cb3 \strokec8 "name"\cf0 \cb3 \strokec4 : \cf8 \cb3 \strokec8 "Morad"\cf0 \cb3 \strokec4 , \cf8 \cb3 \strokec8 "Phone"\cf0 \cb3 \strokec4 : \cf8 \cb3 \strokec8 "0551115555"\cf0 \cb3 \strokec4 \},\cb1 \
\cb3     \{\cf8 \cb3 \strokec8 "name"\cf0 \cb3 \strokec4 : \cf8 \cb3 \strokec8 "Abdullah"\cf0 \cb3 \strokec4 , \cf8 \cb3 \strokec8 "Phone"\cf0 \cb3 \strokec4 : \cf8 \cb3 \strokec8 "0551116666"\cf0 \cb3 \strokec4 \}\cb1 \
\cb3 ]\cb1 \
\
\cf5 \cb3 \strokec5 def\cf0 \strokec4  find_owner(phone_number):\cb1 \
\cb3     \cf2 \strokec2 # Check if the phone number is valid\cf0 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 if\cf0 \strokec4  \cf5 \strokec5 not\cf0 \strokec4  phone_number.isdigit() \cf5 \strokec5 or\cf0 \strokec4  len(phone_number) != \cf6 \strokec6 10\cf0 \strokec4 :\cb1 \
\cb3         \cf5 \strokec5 return\cf0 \strokec4  \cf8 \cb3 \strokec8 "This is an invalid number"\cf0 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 # Search for the phone number in the contactTable\cf0 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 for\cf0 \strokec4  contact \cf5 \strokec5 in\cf0 \strokec4  contactTable:\cb1 \
\cb3         \cf5 \strokec5 if\cf0 \strokec4  contact[\cf8 \cb3 \strokec8 "Phone"\cf0 \cb3 \strokec4 ] == phone_number:\cb1 \
\cb3             \cf5 \strokec5 return\cf0 \strokec4  \cf8 \cb3 \strokec8 "Owner: "\cf0 \cb3 \strokec4  + contact[\cf8 \cb3 \strokec8 "name"\cf0 \cb3 \strokec4 ]\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 # If the phone number is not found\cf0 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 return\cf0 \strokec4  \cf8 \cb3 \strokec8 "Sorry, the number is not found"\cf0 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 # Get input from the user\cf0 \cb1 \strokec4 \
\cb3 phone_number = input(\cf8 \cb3 \strokec8 "Enter a phone number (10 digits): "\cf0 \cb3 \strokec4 )\cb1 \
\
\cf2 \cb3 \strokec2 # Call the function to find the owner\cf0 \cb1 \strokec4 \
\cb3 result = find_owner(phone_number)\cb1 \
\
\cf2 \cb3 \strokec2 # Print the result\cf0 \cb1 \strokec4 \
\cb3 print(result)\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \outl0\strokewidth0 \strokec4 \
}